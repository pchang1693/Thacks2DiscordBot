package me.outfiay.bots.FilterBot4;

import java.io.*;
import javax.security.auth.login.LoginException;
import net.dv8tion.jda.core.AccountType;
import net.dv8tion.jda.core.JDA;
import net.dv8tion.jda.core.JDABuilder;
import net.dv8tion.jda.core.Permission;
import net.dv8tion.jda.core.entities.Message;
import net.dv8tion.jda.core.entities.MessageChannel;
import net.dv8tion.jda.core.entities.User;
import net.dv8tion.jda.core.events.message.MessageReceivedEvent;
import net.dv8tion.jda.core.exceptions.RateLimitedException;
import net.dv8tion.jda.core.hooks.ListenerAdapter;

public class App extends ListenerAdapter	
{
	//Global variables for message ID and message content 
	public String wordId = "", wordContent = "";
	
	//main method - creating the Discord bot
    public static void main( String[] args ) throws LoginException, IllegalArgumentException, InterruptedException, RateLimitedException
    {
    	
    	JDA jdabot = new JDABuilder(AccountType.BOT).setToken("MzcxMzcwMTQ4NDMyNzA3NTg1.DM22QQ.RDZvv5gx5AwbJVlYrhvnPWEs9d4").buildBlocking();
    	jdabot.addEventListener(new App());
    }
    
    //Commands that will be performed when a user enters a message into the channel, depending on the message
    @Override
    public void onMessageReceived(MessageReceivedEvent e)
    {
    	//Try block for bot commands, mandatory for PrintWriter/BufferedReader in case the file can not be found
    	try {
    		//Writing to and reading from a .txt file for storing the banned words
    		PrintWriter pw = new PrintWriter (new FileWriter ("BannedWords.txt", true));
    		BufferedReader br = new BufferedReader (new FileReader ("BannedWords.txt"));
    		String input;
    		//Creating Message, MessageChannel, and User objects
    		Message objMsg = e.getMessage();  		
        	MessageChannel objChannel = e.getChannel();
        	User objUser = e.getAuthor();
        	
        	//Clearing the .txt file of banned words when an admin enters "?reset"
        	if (objMsg.getContent().equals("?reset") && e.getMember().hasPermission(Permission.ADMINISTRATOR) == true) 
        	{
        		PrintWriter (new FileWriter ("BannedWords.txt"));
        		pw.close();
        		objChannel.deleteMessageById(objMsg.getId()).queue();
        		objChannel.sendMessage("The banned words list has been reset!").queue();
        	}
        	//Send a command-unallowed message if a user other than an admin enters "?reset"
        	else if (objMsg.getContent().equals("?reset") && e.getMember().hasPermission(Permission.ADMINISTRATOR) == false) 
        	{
        		objChannel.deleteMessageById(objMsg.getId()).queue();
        		objChannel.sendMessage("`NO POWER`").queue();
        	}
        	
        	//Listing the commands and their functions when an admin enters "?help"
        	if (objMsg.getContent().equals("?help") && e.getMember().hasPermission(Permission.ADMINISTRATOR) == true) 
        	{
        		objChannel.deleteMessageById(objMsg.getId()).queue();
        		objChannel.sendMessage("`?enforce - Bans a message! `").queue();
        		objChannel.sendMessage("`?reset - Removes all bans!`").queue();
        	}
        	//Send a command-unallowed message if a user other than an admin enters "?help"
        	else if (objMsg.getContent().equals("?help") && e.getMember().hasPermission(Permission.ADMINISTRATOR) == false) 
        	{
        		objChannel.deleteMessageById(objMsg.getId()).queue();
        		objChannel.sendMessage("`NO POWER`").queue();
        	}
        	
        	//Banning a word by deleting the previous offensive message and entering it into the .txt file 
        	if (objMsg.getContent().equals("?enforce") && e.getMember().hasPermission(Permission.ADMINISTRATOR) == true) 
        	{
        		pw.println (wordContent);
        		pw.close ();
        		objChannel.deleteMessageById(wordId).queue();
        		objChannel.deleteMessageById(objMsg.getId()).queue();
        		objChannel.sendMessage("That word or phrase is now banned, " + objUser.getAsMention() + "!").queue();
        	}
        	//Not allowing a word/phrase to be banned if a user other than an admin enters "?enforce"
        	else if (objMsg.getContent().equals("?enforce") && e.getMember().hasPermission(Permission.ADMINISTRATOR) == false) {
        		objChannel.deleteMessageById(objMsg.getId()).queue();
        		objChannel.sendMessage("`NO POWER`").queue();
        	}
        	
        	//Adding emote reactions to the bot's message if a user tries to use a banned word/phrase after it has been banned
        	if (objMsg.getContent().contains("That word or phrase has been banned, "))
        	{
        		objChannel.addReactionById(objMsg.getId(), "üò°").queue();
        		objChannel.addReactionById(objMsg.getId(), "‚ùó").queue();
        		objChannel.addReactionById(objMsg.getId(), "‚ùå").queue();
        	}
        	
        	//If a word/phrase is already in the .txt file of banned words, the bot deletes the word/phrase
        	input = br.readLine();
        	while (input != null) {
        		if (objMsg.getContent().equalsIgnoreCase(input) || objMsg.getContent().contains(input))
        		{
        			objChannel.deleteMessageById(objMsg.getId()).queue();
        			objChannel.sendMessage("That word or phrase has been banned, " + objUser.getAsMention() + "!").queue();
        			break;
        		}
        		
        		input = br.readLine();
        	}
        	//Setting wordId to the message's ID and wordContent to the message's content
        	wordId = objMsg.getId();
        	wordContent = objMsg.getContent();
    	}
    	//Catch exception if the text file cannot be found
    	catch (IOException a) {
    		System.out.println("Text file not found.");
    	}   	
    }

	private void PrintWriter(FileWriter fileWriter) {
		// TODO Auto-generated method stub
	}
}
