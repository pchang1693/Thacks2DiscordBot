package Discord.JavaBot;

import java.io.*;
import java.util.ArrayList;

import javax.security.auth.login.LoginException;


import net.dv8tion.jda.core.AccountType;
import net.dv8tion.jda.core.JDA;
import net.dv8tion.jda.core.JDABuilder;
import net.dv8tion.jda.core.entities.Message;
import net.dv8tion.jda.core.entities.MessageChannel;
import net.dv8tion.jda.core.entities.User;
import net.dv8tion.jda.core.events.message.MessageReceivedEvent;
import net.dv8tion.jda.core.events.message.react.GenericMessageReactionEvent;
import net.dv8tion.jda.core.exceptions.RateLimitedException;
import net.dv8tion.jda.core.hooks.ListenerAdapter;

public class App extends ListenerAdapter	
{
    public static void main( String[] args ) throws LoginException, IllegalArgumentException, InterruptedException, RateLimitedException
    {
    	
    	JDA jdabot = new JDABuilder(AccountType.BOT).setToken("MzcxMzczNjczMzM0MTc3Nzkz.DM0sRA.5ACIqV5C9KVn1zg4eJFEWzqStpE").buildBlocking();
    	jdabot.addEventListener(new App());
    }
    
    public void onReactionAdded(GenericMessageReactionEvent e){
    	System.out.println(e.getReactionEmote());
    	e.getChannel().sendMessage(e.getReactionEmote().getName()).queue();
    	e.getChannel().sendMessage("hello").queue();
    }
    
    public String strId="";
    public ArrayList <String> listMsgs = new ArrayList<String>();
    
    @Override
    public void onMessageReceived(MessageReceivedEvent e)
    {
    	Message objMsg = e.getMessage();
    	MessageChannel objChannel = e.getChannel();
    	User objUser = e.getAuthor();
    	
    	String strMsg = objMsg.getContent().toLowerCase();
    	
    	// Prevents users from typing certain keywords
		if (strMsg.contains("fuck"))
		{
    		objChannel.deleteMessageById(objMsg.getId()).queue();
			objChannel.sendMessage("Language, " + objUser.getAsMention() + "!").queue();
		}
    	
    	// Deletes the previous message
		else if (strMsg.contains("!delprev"))
    	{
    		objChannel.deleteMessageById(strId).queue();
    		objChannel.deleteMessageById(objMsg.getId()).queue();
    	}
		
		// Sends all previous messages from beginning of run
		else if (strMsg.contains("!ban"))
		{
			System.out.println(objChannel.getIterableHistory());
			objChannel.sendMessage("banned!").queue();
			File.writeStringToFile();
		}
		
		
		else if (strMsg.contains("!prev"))
		{
			listMsgs.add(strMsg);
		}
		
		
		
    	strId = objMsg.getId();
    	
    }
}
